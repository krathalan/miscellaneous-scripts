#!/usr/bin/env bash
#
# Description: Removes a specified string from all files in the current
#              directory.
#
# Homepage: https://github.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2019-2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput bold && tput setaf 2)
readonly RED=$(tput bold && tput setaf 1)
readonly WHITE=$(tput bold)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ ! $# -gt 0 ]] &&
  exit_script_on_failure "You must specify a string to be removed from the filenames."

printf "%s==>%s %sThis is what the files will be renamed to:%s\n" "${GREEN}" "${NC}" "${WHITE}" "${NC}"
for file in *; do
  printf "%s\n" "${file//$1}"
done

printf "\n%s==>%s %sProceed with renaming?%s\n" "${GREEN}" "${NC}" "${WHITE}" "${NC}"
read -r -p "[y/N] " response
case "$response" in
  [yY][eE][sS]|[yY])
    for file in *; do
      mv "${file}" "${file//$1}" 2> /dev/null || true
    done
    printf "Files renamed.\n"
    ;;
  *)
    printf "No files renamed.\n"
    ;;
esac
