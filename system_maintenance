#!/bin/bash
#
# Description: Performs regular system maintenance procedures.
#
# Homepage: https://gitlab.com/krathalan/
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------
# ----- Program variables -----
# -----------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly TURQOISE=$(tput bold && tput setaf 6)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

readonly SCRIPT_NAME=$(basename "$0")
readonly USER_HOME=$(eval echo ~"${HOME}")
stepCounter=1
stepWithColor="${TURQOISE}${stepCounter}${NC}"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() {
  printf "\n%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

#######################################
# Prints " done."
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
print_done()
{
  stepCounter=$(( stepCounter + 1 ))
  stepWithColor="${TURQOISE}${stepCounter}${NC}"
  echo -e "Done."
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

# Print intro
echo -e "Starting ${SCRIPT_NAME} Bash script; Copyright (C) 2019 krathalan"
echo -e "This is free software: you are free to change and redistribute it."
echo -e "There is NO WARRANTY, to the extent permitted by law."

if [[ $(whoami) == "root" ]]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi


if cat /etc/*-release | grep -qi arch; then
  echo -e "\n${stepWithColor}. Updating packages..."
  yay -Syu --devel
  print_done
  
  echo -e "\n${stepWithColor}. Removing unused packages..."
  sudo pacman -Rns "$(pacman -Qtdq)" 2> /dev/null || echo -e "No packages to remove"
  print_done
fi

if cat /etc/*-release | grep -qi fedora; then
  echo -e "\n${stepWithColor}. Updating dnf packages..."
  sudo dnf upgrade --refresh
  print_done

  echo -e "\n${stepWithColor}. Removing old cached dnf packages..."
  sudo dnf clean packages
  print_done

  echo -e "\n${stepWithColor}. Removing unused dnf packages..."
  sudo dnf autoremove
  print_done
fi

if cat /etc/*-release | grep -qi void; then
  echo -e "\n${stepWithColor}. Removing old cached xbps packages..."
  sudo xbps-remove -O
  print_done

  echo -e "\n${stepWithColor}. Removing unused xbps packages..."
  sudo xbps-remove -o
  print_done

  echo -e "\n${stepWithColor}. Updating xbps packages..."
  sudo xbps-install -Su
  print_done
fi

echo -e "\n${stepWithColor}. Removing unused Flatpaks..."
flatpak uninstall -y --unused
print_done

echo -e "\n${stepWithColor}. Updating Flatpaks..."
flatpak update -y
print_done

echo -e "\n${stepWithColor}. Emptying trash..."
rm -rf "${USER_HOME}"/.local/share/Trash/files/*
rm -rf "${USER_HOME}"/.local/share/Trash/info/*
rm -rf "${USER_HOME}"/.local/share/Trash/expunged/*
print_done

echo -e "\n${stepWithColor}. Printing disk usage..."
neofetch disk
print_done