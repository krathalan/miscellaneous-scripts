#!/bin/bash
#
# Description: Performs regular system maintenance procedures.
#
# Homepage: https://gitlab.com/krathalan/
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------
# ----- Program variables -----
# -----------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly TURQOISE=$(tput bold && tput setaf 6)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

readonly SCRIPT_NAME=$(basename "$0")
readonly USER_HOME=$(eval echo ~"${HOME}")
stepCounter=1
stepWithColor="${TURQOISE}${stepCounter}${NC}"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() {
  printf "\n%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

#######################################
# Properly configures stepWithColor.
# Globals:
#   stepCounter, stepWithColor, TURQOISE, NC
# Arguments:
#   none
# Returns:
#   none
#######################################
complete_step()
{
  stepCounter=$(( stepCounter + 1 ))
  stepWithColor="${TURQOISE}${stepCounter}${NC}"
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

# Print intro
printf "Starting %s Bash script; Copyright (C) 2019 krathalan\n" "${SCRIPT_NAME}"
printf "This is free software: you are free to change and redistribute it.\n"
printf "There is NO WARRANTY, to the extent permitted by law.\n"

if [[ $(whoami) == "root" ]]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi


if cat /etc/*-release | grep -qi arch; then
  printf "\n%s. Updating packages...\n" "${stepWithColor}"
  yay -Syu --devel
  complete_step
  
  printf "\n%s. Removing unused packages...\n" "${stepWithColor}"
  sudo pacman -Rs "$(pacman -Qtdq)" 2> /dev/null || printf "No packages to remove\n"
  complete_step

  printf "\n%s. Checking pacman database...\n" "${stepWithColor}"
  sudo pacman -Dk
  complete_step
fi

if cat /etc/*-release | grep -qi fedora; then
  printf "\n%s. Updating dnf packages...\n" "${stepWithColor}"
  sudo dnf upgrade --refresh
  complete_step

  printf "\n%s. Removing old cached dnf packages...\n" "${stepWithColor}"
  sudo dnf clean packages
  complete_step

  printf "\n%s. Removing unused dnf packages...\n" "${stepWithColor}"
  sudo dnf autoremove
  complete_step
fi

if cat /etc/*-release | grep -qi void; then
  printf "\n%s. Removing old cached xbps packages...\n" "${stepWithColor}"
  sudo xbps-remove -O
  complete_step

  printf "\n%s. Removing unused xbps packages...\n" "${stepWithColor}"
  sudo xbps-remove -o
  complete_step

  printf "\n%s. Updating xbps packages...\n" "${stepWithColor}"
  sudo xbps-install -Su
  complete_step
fi

printf "\n%s. Removing unused Flatpaks...\n" "${stepWithColor}"
flatpak uninstall -y --unused
complete_step

printf "\n%s. Updating Flatpaks...\n" "${stepWithColor}"
flatpak update -y
complete_step

printf "\n%s. Emptying trash...\n" "${stepWithColor}"
rm -rf "${USER_HOME}"/.local/share/Trash/files/*
rm -rf "${USER_HOME}"/.local/share/Trash/info/*
rm -rf "${USER_HOME}"/.local/share/Trash/expunged/*
printf "Done.\n"
complete_step

printf "\n%s. Printing disk usage...\n" "${stepWithColor}"
neofetch disk
complete_step