#!/bin/bash
#
# Description: Sets up Fedora Linux with the software I use, and 
#              configures various aspects of the system to my liking.
#
# Homepage: https://gitlab.com/krathalan
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------
# ----- Program variables -----
# -----------------------------

readonly USER_HOME=$(eval echo ~"${SUDO_USER}")

installGamingSoftware=false

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints "Done."
# Globals:
#   none
# Arguments:
#   none
# Returns:
#   none
#######################################
print_done() {
  echo -e "Done.\\n"
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

# Parse flags. From:
# https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0; do
  case "$1" in
    -g)
      installGamingSoftware=true;
      ;;
    *)
      break
      ;;
  esac
done

# Print intro
readonly scriptName=$(basename "$0")
echo -e "Starting $scriptName BASH script; Copyright (C) 2019 krathalan"
echo -e "This is free software: you are free to change and redistribute it."
echo -e "There is NO WARRANTY, to the extent permitted by law.\\n"

echo -e "Removing unused software..."
dnf remove cheese gnome-calendar gnome-contacts gnome-documents gnome-maps gnome-weather evolution simple-scan gnome-photos gnome-boxes gnome-software evince totem totem-plugins gedit
print_done

echo -e "Removing GNOME tracker..."
# From https://ask.fedoraproject.org/en/question/9822/how-do-i-disable-tracker-in-gnome/
gsettings set org.freedesktop.Tracker.Miner.Files enable-monitors false
gsettings set org.freedesktop.Tracker.Miner.Files crawling-interval -2
# From https://gist.github.com/vancluever/d34b41eb77e6d077887c#non-invasive-disable-cheat-sheet
# Edited with ShellCheck (and tested!)
tracker daemon -k
cd "$USER_HOME/.config/autostart"
cp -v /etc/xdg/autostart/tracker-* ./
for FILE in *.desktop; do echo Hidden=true >> "$FILE"; done
rm -rf "$USER_HOME/.cache/tracker" "$USER_HOME/.local/share/tracker"
print_done

echo -e "Adding .gif thumbnails to GNOME Files (Nautilus)..."
# From https://bbs.archlinux.org/viewtopic.php?id=173653
dnf install -y ffmpegthumbnailer
sed -i "s#MimeType=#MimeType=image/gif;#" "/usr/share/thumbnailers/ffmpegthumbnailer.thumbnailer"
rm -rf "$USER_HOME/.cache/thumbnails"
print_done

echo -e "Installing packages from RPM..."
dnf install -y adapta-gtk-theme bleachbit comix deluge dnf-automatic epiphany ffmpeg firefox flatpak gimp git gnome-tweaks google-roboto-mono-fonts keepassxc kleopatra libreoffice linux-libertine-fonts neofetch perl-Image-ExifTool rhythmbox seahorse ShellCheck syncthing thunderbird unrar vlc youtube-dl zim # unrar needed for comix
print_done

echo -e "Installing Flatpaks from Flathub..."
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak install flathub com.discordapp.Discord
flatpak install flathub org.signal.Signal
flatpak update -y # Needed to force flatpak to install video and audio drivers
print_done

echo -e "Installing Balena Etcher..."
# From https://github.com/balena-io/etcher#redhat-rhel-and-fedora-based-package-repository-gnulinux-x86x64
cd /tmp
wget https://balena.io/etcher/static/etcher-rpm.repo -O /etc/yum.repos.d/etcher-rpm.repo
dnf install -y balena-etcher-electron
print_done

echo -e "Setting up Git global variables..."
git config --global user.name "Hunter Peavey"
git config --global user.email "vrywjvgviuotxeioqipx@disroot.org"
git config --global user.signingkey 546BFAE445159FFC
git config --global commit.gpgsign true
print_done

echo -e "Installing VSCodium..."
# From https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo#how-to-install-for-other-distros
rpm --import https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg
dnf config-manager --add-repo https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/repos/rpms/
dnf install -y vscodium
print_done

echo -e "Installing Papirus icons..."
# From https://github.com/PapirusDevelopmentTeam/papirus-icon-theme#papirus-installer
# https://copr.fedorainfracloud.org/coprs/dirkdavidis/papirus-icon-theme/
dnf copr enable dirkdavidis/papirus-icon-theme
dnf install papirus-icon-theme
print_done

if [ "$installGamingSoftware" = true ]; then
  echo -e "Installing NVIDIA proprietary drivers..."
  dnf install -y xorg-x11-drv-nvidia akmod-nvidia

  echo -e "Setting up Lutris gaming environment..."
  dnf install -y gnome-desktop3 lutris vulkan-tools
  dnf install -y http://download.opensuse.org/repositories/home:/gasinvein:/fedora/Fedora_29/x86_64/dxvk-0.94-2.fc29.1.x86_64.rpm # Install DXVK
  dnf install -y gnutls gnutls-devel openldap openldap-devel libgpg-error sqlite2.i686 sqlite2.x86_64 # Install Battle.net dependencies https://github.com/lutris/lutris/wiki/Game:-Blizzard-App
  print_done

  echo -e "Installing WINE..."
  dnf config-manager --add-repo https://dl.winehq.org/wine-builds/fedora/29/winehq.repo
  dnf install -y winehq-staging
  print_done
fi

echo -e "Reboot your computer now!"