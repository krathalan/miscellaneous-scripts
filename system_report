#!/usr/bin/env bash
#
# Description: System report script
#
# Homepage: https://github.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
GREEN=$(tput bold && tput setaf 2)
RED=$(tput bold && tput setaf 1)
WHITE=$(tput bold)
NC=$(tput sgr0) # No color/turn off all tput attributes
readonly GREEN
readonly RED
readonly WHITE
readonly NC

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# https://unix.stackexchange.com/questions/119269/how-to-get-ip-address-using-shell-script
ip_address="$(ip addr | grep 'state UP' -A4 | grep inet | head -n1 | awk '{print $2}' | cut -f1  -d'/')"
printf "System report for %s@%s (%s) / %s\n\n" "${USER}" "${HOSTNAME}" "${ip_address}" "$(date)"

printf "%sServices:\n%s" "${WHITE}" "${NC}"

services_to_check=("dnscrypt-proxy" "dovecot" "endlessh" "firewalld" "jellyfin" "krack-receive" "libreddit" "lighttpd" "nginx" "nitter" "opendkim" "opendmarc" "pihole-FTL" "postfix" "postgrey" "radicale" "redis" "spamassassin" "syncthing@anders" "transmission")

status_to_print=""

for systemd_service in "${services_to_check[@]}"; do
  if systemctl is-enabled -q "${systemd_service}"; then
    status_to_print="${GREEN}online [âœ”]"
    if ! systemctl is-enabled -q "${systemd_service}"; then
      status_to_print="${RED}offline [x]"
    fi
  else
    continue
  fi

  printf "%s: %s%s\n" "${systemd_service}" "${status_to_print}" "${NC}"
done

printf "%s\nDrives:\n%s" "${WHITE}" "${NC}"
if pacman -Qq grc &> /dev/null; then
  add_color="/usr/bin/grc -es"
fi
${add_color} df --type=ext4 --type=xfs --type=f2fs --type=zfs --type=btrfs -hT

if systemctl is-active -q transmission; then
  printf "%s\nTorrents:\n%s" "${WHITE}" "${NC}"
  transmission-remote -l
fi

if systemctl is-active -q firewalld; then
  printf "%s\nFirewall:\n%s" "${WHITE}" "${NC}"
  sudo firewall-cmd --list-all | sed -n '/rich rules/q;p'
fi

if systemctl is-enabled -q krack-build@builder.timer; then
  printf "%s\nKrack-build status:\n%s" "${WHITE}" "${NC}"
  if systemctl is-active -q krack-build@builder.service; then
    printf "krack-build@builder.service is currently running\n"
  else
    printf "Waiting for krack-build@builder.timer\n"
    systemctl status krack-build@builder.timer | grep "Trigger:"
  fi
fi

printf "%s\nSystem:\n%s Uptime:" "${WHITE}" "${NC}"
uptime
printf " "
sensors | grep -E "Package id|Tdie"
