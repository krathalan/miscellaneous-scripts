#!/bin/bash
#
# Description: Copies the kernel and makes a new initramfs with dracut.
# Has several personal additions that may have unintended consequences on
# other systems. Read through the script before using!
#
# Currently supports all official linux-* package variants, as well as
# these from the AUR: clear, mainline, next, zen
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2019-2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeou pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput bold && tput setaf 2)
readonly WHITE=$(tput sgr0 && tput bold)
readonly CYAN=$(tput bold && tput setaf 6)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# System config
readonly BOOTDIR="/boot"

# Temp build directory information
readonly SCRIPT_NAME="${0##*/}"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Returns the file extension for $1,
# e.g. returns "-lts" for linux-lts
# Globals:
#   none
# Arguments:
#   $1: path to glob match, e.g. "/usr/lib/modules/5.4.59-1-lts"
# Returns:
#   file extension for kernel in $1, e.g. "-lts"
#######################################
extension()
{
  local toPrint=""

  case "$1" in
    *arch*)
      # Do nothing
      ;;
    *clear*)
      toPrint+="-clear"
      ;;
    *hardened*)
      toPrint+="-hardened"
      ;;
    *lts*)
      toPrint+="-lts"
      ;;
    *mainline*)
      toPrint+="-mainline"
      ;;
    *next*)
      toPrint+="-next"
      ;;
    *zen*)
      toPrint+="-zen"
      ;;
  esac

  # If hostname contains "games", append "-gaming" to file extension
  if [[ "${HOSTNAME}" == *"games"* ]]; then
    toPrint+="-gaming"
  fi

  printf -- "%s" "${toPrint}"
}

#######################################
# Makes an initramfs with dracut.
# Globals:
#   BOOTDIR
# Arguments:
#   $1: kernel version, e.g. "5.4.59-1-lts"
# Returns:
#   none
#######################################
make_initramfs()
{
  local -r OUTPUT_INITRAMFS="${BOOTDIR}/initramfs-linux$(extension "$1").img"

  dracut --quiet --kver "$1" --force "${OUTPUT_INITRAMFS}"
}

#######################################
# Makes an initramfs with dracut.
# Globals:
#   WHITE
#   SCRIPT_NAME
#   GREEN
#   NC
# Arguments:
#   $1: message to print
# Returns:
#   none
#######################################
print_message()
{
  printf "%s==> %s: %s%s%s\n" "${WHITE}"  "${SCRIPT_NAME}" "${GREEN}" "$1" "${NC}"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# Keep track of which kernels an initramfs has already been created for
# Can occur when: nvidia driver is updated or when it's a change to usr/lib/initcpio/*
# alongside a kernel upgrade (e.g. kernel and systemd upgrade)
completedKernels=""

# Figure out what string to pass to dracut for the kernel version
kernel_ver_dracut=""

while read -r line; do
  if [[ "${line}" == *extramodules/nvidia* ]]; then
    # Triggers when it's a change to nvidia driver
    kernel_ver_dracut="${line##*usr/lib/modules/}"
    kernel_ver_dracut="${kernel_ver_dracut%%/*}"

    # Don't make multiple initramfses for the same kernel
    if [[ "${completedKernels}" == *"${kernel_ver_dracut}"* ]]; then
      continue
    fi

    # Mark kernel as completed
    completedKernels="${completedKernels}${kernel_ver_dracut}"

    print_message "making initcpio for ${kernel_ver_dracut}"
    make_initramfs "${kernel_ver_dracut}"
  elif [[ "${line}" != */vmlinuz ]]; then
    # Triggers when it's a change to usr/lib/initcpio/*
    # Remake all initramfses
    for moduleDirectory in /usr/lib/modules/*; do
      # ##*/ to remove "/usr/lib/modules/" prefix
      kernel_ver_dracut="${moduleDirectory##*/}"

      # Don't make multiple initramfses for the same kernel
      if [[ "${completedKernels}" == *"${kernel_ver_dracut}"* ]]; then
        continue
      fi

      # Need to copy kernels here. If sbctl is installed, kernels on /boot
      # are deleted after generating efi bundles. To remake bundles, kernel
      # must be copied again.

      # Reduce e.g. "5.8.2-arch1-1" => "5.8.2" for pretty printing :)
      pretty_kernel_version="${kernel_ver_dracut%%-*}"

      # Get file extension for kernel, e.g. kernel_extension=-lts for linux-lts
      kernel_extension="$(extension "${kernel_ver_dracut}")"

      print_message "copying ${CYAN}linux${kernel_extension}${GREEN} (${pretty_kernel_version}) kernel to ${BOOTDIR}"

      install -Dm644 "${moduleDirectory}/vmlinuz" "${BOOTDIR}/vmlinuz-linux${kernel_extension}"

      # Mark kernel as completed
      completedKernels="${completedKernels}${kernel_ver_dracut}"

      print_message "making initcpio for ${CYAN}linux${kernel_extension}${GREEN} (${pretty_kernel_version})"
      make_initramfs "${kernel_ver_dracut}"
    done
  fi

  if ! read -r pkgbase > /dev/null 2>&1 < "${line%/vmlinuz}/pkgbase"; then
      # If the kernel has no pkgbase, we skip it
      continue
  fi

  # $line is now the kernel version we're looking for to pass to dracut
  # Parameter substitution is used to reduce e.g.:
  # "usr/lib/modules/5.8.2-arch1-1/vmlinuz" => "5.8.2-arch1-1"
  kernel_ver_dracut="${line##*usr/lib/modules/}"
  kernel_ver_dracut="${kernel_ver_dracut%%/*}"

  # Reduce e.g. "5.8.2-arch1-1" => "5.8.2" for pretty printing :)
  pretty_kernel_version="${kernel_ver_dracut%%-*}"

  # Remove personal sections in pkgbase
  # I use these for building various linux-next-${section}-git packages
  sectionsToRemove=("generic" "krathalan" "ryzen2" "skylake")
  for section in "${sectionsToRemove[@]}"; do
    pkgbase="${pkgbase//-${section}}"
  done

  # If hostname contains "games", append "-gaming" to /boot/vmlinuz-$pkgbase filename
  if [[ "${HOSTNAME}" == *"games"* ]]; then
    pkgbase+="-gaming"
  fi

  print_message "copying ${CYAN}${pkgbase}${GREEN} (${pretty_kernel_version}) kernel to ${BOOTDIR}"
  install -Dm644 "${line}" "${BOOTDIR}/vmlinuz-${pkgbase}"

  # Don't make multiple initramfses for the same kernel
  if [[ "${completedKernels}" == *"${kernel_ver_dracut}"* ]]; then
    continue
  fi

  print_message "making initcpio for ${CYAN}${pkgbase}${GREEN} (${pretty_kernel_version})"
  make_initramfs "${kernel_ver_dracut}"
done

if command -v "sbctl" &> /dev/null; then
  print_message "regenerating efi bundles for secure boot"
  sbctl generate-bundles
  print_message "resigning all enrolled files for secure boot"
  sbctl sign-all

  for file in "${BOOTDIR}"/vmlinuz*; do
    rm -f "${file}"
  done

  for file in "${BOOTDIR}"/initramfs*; do
    rm -f "${file}"
  done
fi
