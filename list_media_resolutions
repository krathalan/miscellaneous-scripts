#!/usr/bin/env bash
#
# Description: List the resolutions of all video media in the current directory.
#
# Homepage: https://github.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2020-2024 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Clean up if script is interrupted early
trap "kill 0" SIGINT
trap "clean_up" EXIT

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
RED=$(tput bold && tput setaf 1)
NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly SCRIPT_NAME="${0##*/}"
TMP_DIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
readonly OUTPUT_FILE="${TMP_DIR}/media-resolutions.txt"

readonly TMP_DIR RED NC

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

clean_up()
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

for file in ./*; do
  # Skip other files
  if [[ "${file}" == *".jpg" ]] || [[ "${file}" == *".jpeg" ]] || [[ "${file}" == *".png" ]] || [[ "${file}" == *".srt" ]] || [[ "${file}" == *".vtt" ]]; then
    continue
  fi

  tmpJson="$(mediainfo --Output=JSON "${file}" | sed 's/@//g' | jaq -r ".media.track[] | select(.type == \"Video\")")"

  mapfile -t mediaProperties <<< "$(jaq -r ".Width, .Height" <<< "${tmpJson}")"

  printf "%sx%s -- %s\n" "${mediaProperties[0]}" "${mediaProperties[1]}" "${file}" >> "${OUTPUT_FILE}"
done

cat "${OUTPUT_FILE}"