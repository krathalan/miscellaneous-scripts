#!/usr/bin/env bash
#
# Description: Checks for package updates from the AUR.
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2020 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Clean up if script is interrupted early
trap "kill 0" SIGINT
trap "clean_up" EXIT

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput setaf 10)
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly AUR_RPC_URL="https://aur.archlinux.org/rpc/?v=5&type=info"
readonly SCRIPT_NAME=$(basename "$0")

# TMP information
readonly TMP_DIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
readonly OUTPUTFILEBAD="${TMP_DIR}/${SCRIPT_NAME}-bad.txt"
readonly OUTPUTFILEGOOD="${TMP_DIR}/${SCRIPT_NAME}-good.txt"
readonly AUR_JSON="${TMP_DIR}/aur.json"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

quiet="false"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

clean_up()
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

#######################################
# Checks to see if the version of a package on the AUR has
# a different version number to the installed package.
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: package name
#   $2: installed package version
# Returns:
#   none
#######################################
process_package()
{
  # Extract version from AUR json

  local -r aurVersion="$(jq -r ".results[] | select(.Name == \"$1\").Version" "${AUR_JSON}")"

  if [[ "${aurVersion}" == "" ]]; then
    printf "%s%s not on AUR%s\n" "${GREEN}" "$1" "${NC}" >> "${OUTPUTFILEGOOD}"
  elif [[ "${aurVersion}" != "$2" ]]; then
    printf "%s%s %s installed; %s available%s\n" "${RED}" "$1" "$2" "${aurVersion}" "${NC}" >> "${OUTPUTFILEBAD}"
  else
    printf "%s%s up to date%s\n" "${GREEN}" "$1" "${NC}" >> "${OUTPUTFILEGOOD}"
  fi
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

if [ "$(whoami)" = "root" ]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

if [[ $# -gt 0 ]]; then
  if [[ "$1" == "--quiet" ]] || [[ "$1" == "-q" ]]; then
    quiet="true"
  fi
fi

# Ensure both output files get written to
touch "${OUTPUTFILEBAD}" "${OUTPUTFILEGOOD}" &

mapfile -t packages <<< "$(pacman -Qmq)"
mapfile -t packageVersions <<< "$(pacman -Qm | cut -d' ' -f2-)"

requestURL="${AUR_RPC_URL}"

for package in "${packages[@]}"; do
  requestURL+="&arg[]=${package}"
done

curl -o "${AUR_JSON}" --silent "${requestURL}"

whileCounter=0

while [[ "${whileCounter}" -lt "${#packages[@]}" ]]; do
  process_package "${packages[${whileCounter}]}" "${packageVersions[${whileCounter}]}"
  whileCounter="$(( whileCounter + 1 ))"
done

if [[ "${quiet}" == "true" ]]; then
  sort "${OUTPUTFILEBAD}"
else
  sort "${OUTPUTFILEBAD}" "${OUTPUTFILEGOOD}"
fi
