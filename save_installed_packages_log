#!/bin/bash
#
# Description: Creates a list of explicitly installed system packages.
#
# This script is intended to be used in a pacman hook in /etc/pacman.d/hooks.
#
# Homepage: https://gitlab.com/krathalan/miscellaneous-scripts
#
# Edited from an anonymous gist on Github
# https://gist.github.com/anonymous/a588e2ca9160d5fb142b
# https://web.archive.org/web/20190511164651/https://gist.github.com/anonymous/a588e2ca9160d5fb142b

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Packages
readonly AUR_PACKAGES=$(pacman --query --quiet --foreign)
readonly DEP_PACKAGES=$(pacman --query --quiet --deps)

# Other
readonly DATE=$(date)
readonly LOG_PATH="/var/log/installed_packages.log"
readonly SCRIPT_NAME=$(basename "$0")

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

append_to_log()
{
  printf "%s\n" "$1" | tee -a "${LOG_PATH}" > /dev/null
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() {
  printf "\n[%sâœ–%s] Error: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

get_explicitly_installed_packages_incl_aur() {
  local -r explicit=$(pacman --query --quiet --explicit)
  local -r base=$(pacman --query --quiet --groups base)
  local -r baseDevel=$(pacman --query --quiet --groups base-devel)
  local -r xorgApps=$(pacman --query --quiet --groups xorg-apps)

  # Filter out packages from base, base-devel, and xorg-apps groups
  printf "%s\n%s\n%s\n%s\n%s\n%s\n%s" "${explicit}" "${base}" "${base}" "${baseDevel}" "${baseDevel}" "${xorgApps}" "${xorgApps}" | sort | uniq -u
}

get_explicitly_installed_packages_no_aur() {
  local -r explicit=$(pacman --query --quiet --explicit)
  local -r base=$(pacman --query --quiet --groups base)
  local -r baseDevel=$(pacman --query --quiet --groups base-devel)
  local -r xorgApps=$(pacman --query --quiet --groups xorg-apps)

  # Filter out packages manually installed (from AUR) and from base, base-devel, and xorg-apps groups
  printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s" "${explicit}" "${AUR_PACKAGES}" "${AUR_PACKAGES}" "${base}" "${base}" "${baseDevel}" "${baseDevel}" "${xorgApps}" "${xorgApps}" | sort | uniq -u
}

get_groups_packages() {
  local -r base=$(pacman --query --quiet --groups base)
  local -r baseDevel=$(pacman --query --quiet --groups base-devel)
  local -r xorgApps=$(pacman --query --quiet --groups xorg-apps)

  printf "%s\n%s\n%s" "${base}" "${baseDevel}" "${xorgApps}" | sort | uniq -u
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

if [[ $(whoami) != "root" ]]; then
  exit_script_on_failure "This script must be run AS ROOT!"
fi

# Remove old files
rm -f "${LOG_PATH}"
rm -f "${LOG_PATH}.old"

# Create file
if [[ -f "${LOG_PATH}" ]]; then
  mv "${LOG_PATH}" "${LOG_PATH}.old"
fi

touch "${LOG_PATH}"

# Get list of repos in /etc/pacman.conf
# SC disable needed to split string into array properly 
# shellcheck disable=2207
bracketedListOfRepos=($(grep -i "\[" /etc/pacman.conf | grep -v "#"))

# Remove "[options]" from bracketedListOfRepos
toDelete=("[options]")
for i in "${!bracketedListOfRepos[@]}"; do
  if [[ ${bracketedListOfRepos[i]} = "${toDelete[0]}" ]]; then
    unset 'bracketedListOfRepos[i]'
  fi
done

# Get number of explicit and dependency packages
numberOfExplicitPackages=$(get_explicitly_installed_packages_incl_aur | wc -w)
numberOfAurPackages=$(wc -w <<< "${AUR_PACKAGES}")
numberOfRepoPackages=$(get_explicitly_installed_packages_no_aur | wc -w)
numberOfDependencyPackages=$(wc -w <<< "${DEP_PACKAGES}")
numberOfGroupsPackages=$(get_groups_packages | wc -w)

# Print header and general information
append_to_log "################################################################################"
append_to_log "###################### Arch Linux installed packages list ######################"
append_to_log "################################################################################"
append_to_log ""
append_to_log "# When: ${DATE}"
append_to_log "# With: ${SCRIPT_NAME} from https://gitlab.com/krathalan/miscellaneous-scripts"
append_to_log "# List of repos enabled in /etc/pacman.conf: ${bracketedListOfRepos[*]}"
append_to_log "# Total number of packages: $(pacman --query --quiet | wc -w)"
append_to_log ""
append_to_log "###################### ${numberOfExplicitPackages} packages explicitly installed #######################"
append_to_log ""
append_to_log "# This section does not include packages from base, base-devel, and xorg-apps groups"
append_to_log ""
append_to_log "                         ##### ${numberOfAurPackages} from AUR/manual #####"
append_to_log "$(sort <<< "${AUR_PACKAGES}")"
append_to_log ""
append_to_log "                           ##### ${numberOfRepoPackages} from repos #####"
append_to_log "$(get_explicitly_installed_packages_no_aur)"
append_to_log ""
append_to_log "################### ${numberOfDependencyPackages} packages installed as dependencies #####################"
append_to_log "${DEP_PACKAGES}"
append_to_log ""
append_to_log "###### ${numberOfGroupsPackages} packages installed from base, base-devel, and xorg-apps groups ########"
append_to_log "$(get_groups_packages)"
append_to_log ""

# Unbracket list of repos
listOfRepos=()

for repo in "${bracketedListOfRepos[@]}"; do
  bracketRemover=${repo/[}
  bracketRemover=${bracketRemover/]}
  listOfRepos+=("${bracketRemover}")
done

append_to_log "#################### List of repos and installed packages ######################"

for repo in "${listOfRepos[@]}"; do
  installedPackages="$(comm -12 <(pacman -Qq | sort) <(pacman -Slq "${repo}" | sort))"
  numberOfPackagesFromRepo="$(wc -w <<< "$installedPackages")"

  append_to_log "                 ##### ${numberOfPackagesFromRepo} packages installed from ${repo} #####"
  append_to_log "${installedPackages}"
  append_to_log ""
done
