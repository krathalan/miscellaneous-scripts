#!/bin/bash
#
# Description: Gathers execution time data for a specified command.
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -uo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly SCRIPT_NAME=$(basename "$0")

# Used to record time data
timeData=()

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

command_to_time="$1"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() 
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# Print intro
printf "Starting %s Bash script; Copyright (C) 2019-%s krathalan\n" "${SCRIPT_NAME}" "$(date +%Y)"
printf "This is free software: you are free to change and redistribute it.\n"
printf "There is NO WARRANTY, to the extent permitted by law.\n\n"

if [ "$(whoami)" = "root" ]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

# Record the execution time of the command 15 times
printf "Running command 15 times, please be patient...\n"

whileCounter=0

while [[ "${whileCounter}" -lt 15 ]]; do
  startCommandTime=$(date +%s%N | cut -b1-13)
  ${command_to_time} > /dev/null 2> /dev/null
  endCommandTime=$(date +%s%N | cut -b1-13)

  timeData+=( $(( endCommandTime - startCommandTime )) )

  printf "\nExecution %s completed in %s milliseconds" $(( whileCounter + 1 )) "${timeData[${whileCounter}]}"

  whileCounter=$(( whileCounter + 1 ))
done

# Get average of execution time
sum=0
whileCounter=0

while [[ "${whileCounter}" -lt ${#timeData[@]} ]]; do
  sum=$(( sum + timeData[whileCounter] ))
  whileCounter=$(( whileCounter + 1 ))
done

# Get average execution time by dividing the total time elapsed by the number of executions
# Currently in milliseconds
averageExecutionTime=$(echo "${sum} ${#timeData[@]}" | awk '{printf "%.2f\n", $1/$2}')

# Convert to seconds with a precision of 2 decimals
averageExecutionTime=$(echo "${averageExecutionTime} 1000" | awk '{printf "%.2f\n", $1/$2}')

printf "\n\nAverage execution time: %s seconds\n" "${averageExecutionTime}"