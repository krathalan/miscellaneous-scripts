#!/usr/bin/env bash
#
# Description: Gathers execution time data for a specified command.
#
# Homepage: https://git.sr.ht/~krathalan/miscellaneous-scripts
#
# Copyright (C) 2019-2020 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# No -Ee because commands this script measures may fail, and this script should keep going
set -uo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput bold && tput setaf 2)
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes
readonly WHITE=$(tput sgr0 && tput bold)

# Other
readonly SCRIPT_NAME=$(basename "$0")

# Used to record time data
timeData=()

# Number of times command shall be repeated
# Default is 15
repetitions=15

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

print_help()
{
  printf "\n%s - get an average execution time for a specified command\n\n" "${SCRIPT_NAME}"
  printf "Usage:\n  %s [options] \"command to measure\"\n\n" "${SCRIPT_NAME}"
  printf "Options:\n"
  printf "  -h,--help      show this help\n"
  printf "  -n,--number    specify number of times to repeat command\n"
}

# -----------------------------------------
# ------------ Parse user input -----------
# -----------------------------------------

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h)
      print_help
      exit 0
      ;;
    -n)
      shift
      if [[ $# -gt 0 ]]; then
        repetitions="$1"
      else
        exit_script_on_failure "Number of repetitions not specified."
      fi
      shift
      break
      ;;
    --number*)
      if [[ $# -gt 1 ]]; then
        shift
      fi
      if [[ $# -gt 0 ]]; then
        repetitions="$(printf "%s" "$1" | sed -e "s/^[^=]*=//g")"
      else
        exit_script_on_failure "Number of repititions not specified."
      fi
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [[ $# -gt 0 ]]; then
  command_to_time="$*"
else
  exit_script_on_failure "No command to measure specified."
fi

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

if [ "$(whoami)" = "root" ]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

if ! command -v "$(echo "${command_to_time}" | awk '{printf $1}')" > /dev/null; then
  exit_script_on_failure "Command $(echo "${command_to_time}" | awk '{printf $1}') cannot be found."
fi

# Record the execution time of the command 15 times
printf "Running command %s times, please be patient...\n" "${repetitions}"

# Let user read message before potentially pages of output
sleep 3

whileCounter=0

while [[ "${whileCounter}" -lt "${repetitions}" ]]; do
  startCommandTime=$(date +%s%N | cut -b1-13)
  ${command_to_time}
  endCommandTime=$(date +%s%N | cut -b1-13)

  timeData+=( $(( endCommandTime - startCommandTime )) )

  printf "\n%s===> %sgather_time_data: %sExecution %s completed in %s milliseconds %s<===%s" \
    "${WHITE}" "${GREEN}" "${NC}" $(( whileCounter + 1 )) "${timeData[${whileCounter}]}" "${WHITE}" "${NC}"

  whileCounter=$(( whileCounter + 1 ))
done

# Get average of execution time
sum=0
whileCounter=0

while [[ "${whileCounter}" -lt ${#timeData[@]} ]]; do
  sum=$(( sum + timeData[whileCounter] ))
  whileCounter=$(( whileCounter + 1 ))
done

# Get average execution time by dividing the total time elapsed by the number of executions
# Currently in milliseconds
averageExecutionTime=$(echo "${sum} ${#timeData[@]}" | awk '{printf "%.2f\n", $1/$2}')
timeFormat="milliseconds"

if [[ "$(bc -l <<< "${averageExecutionTime} > 1000")" -eq 1 ]]; then
  # Convert to seconds with a precision of 2 decimals
  averageExecutionTime=$(echo "${averageExecutionTime} 1000" | awk '{printf "%.2f\n", $1/$2}')
  timeFormat="seconds"
fi

printf "\n\n%s===> %sgather_time_data: %sAverage execution time: %s %s %s<===%s\n" "${WHITE}" "${GREEN}" "${NC}" "${averageExecutionTime}" "${timeFormat}" "${WHITE}" "${NC}"
