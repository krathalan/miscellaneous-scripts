#!/bin/bash
#
# Description: 
#
# Homepage: https://gitlab.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Clean up if script is interrupted early
trap "clean_up && kill 0" SIGINT

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly RED=$(tput bold && tput setaf 1)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Other
readonly SCRIPT_NAME=$(basename "$0")
readonly TMP_DIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"

# -----------------------------------------
# ------------- User variables ------------
# -----------------------------------------

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

clean_up() 
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() 
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

if [[ "$(whoami)" == "root" ]]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

printf "Downloading blacklist...\n"
wget -q -O "${TMP_DIR}/blacklist.txt" --show-progress "https://git.parabola.nu/blacklist.git/plain/blacklist.txt"
printf "Done.\n\n"

printf "Nonfree packages:\n"

grep -v "\[branding\]" "${TMP_DIR}/blacklist.txt" | grep -v "\[technical\]" > "${TMP_DIR}/blacklist_no_branding.txt"

printf "%s\n%s\n" "$(pacman -Qq)" "$(cut -d ':' -f1 "${TMP_DIR}/blacklist_no_branding.txt")" | sort | uniq -d > "${TMP_DIR}/nonfree_packages.txt"

mapfile -t nonfree_packages < "${TMP_DIR}/nonfree_packages.txt"

counter=0

for package in "${nonfree_packages[@]}"; do
  counter=$(( counter + 1 ))
  printf "%s%s.%s " "${RED}" "${counter}" "${NC}"
  grep "^${package}:" "${TMP_DIR}/blacklist_no_branding.txt"
done

clean_up
