#!/usr/bin/env bash
#
# Description: Script for printing character info for Mythic+ Event.
#
# Homepage: https://github.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2020 Hunter Peavey
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# EXPECTED INPUT -- example file:
# $ cat example_input
# Ahkenatan chogall
# Morisong chogall
# Tireiron laughing-skull
# Euphoric chogall

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide:
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# Clean up if script is interrupted early
trap "kill 0" SIGINT
trap "clean_up" EXIT

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
RED=$(tput bold && tput setaf 1)
NC=$(tput sgr0) # No color/turn off all tput attributes
readonly RED
readonly NC

# Other
readonly SCRIPT_NAME="${0##*/}"
readonly INPUT_FILE="${1:-}"
readonly OUTPUT_FILE="ratings.txt"

TMP_DIR="$(mktemp -d -t "${SCRIPT_NAME}_XXXXXXXX")"
readonly TMP_DIR
readonly DPS_FILE="${TMP_DIR}/dps.txt"
readonly HEALER_FILE="${TMP_DIR}/healer.txt"
readonly TANK_FILE="${TMP_DIR}/tank.txt"

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

clean_up()
{
  rm -rf "${TMP_DIR}"
}

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure()
{
  printf "%sError%s: %s\n" "${RED}" "${NC}" "$1" >&2
  exit 1
}

#######################################
# Returns information for a given character.
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: realm/server, e.g. chogall
#   $2: character name, e.g. Ahkenatan
# Returns:
#   character information
#######################################
resolve_character_info()
{
  local -r raiderIOJson="$(curl --silent -H "Accept: application/json" "https://raider.io/api/v1/characters/profile?region=us&realm=$1&name=$2&fields=gear%2Cmythic_plus_scores_by_season%3Acurrent")"

  if [[ -z "${raiderIOJson}" ]]; then
    exit_script_on_failure "Problem downloading information for $2-$1."
  fi

  mapfile -t parsedJson <<< "$(jq -r ".mythic_plus_scores_by_season[0].scores.all, .gear.item_level_equipped, .class, .active_spec_role" <<< "${raiderIOJson}")"

  # 0: raider.io overall score
  # 1: equipped ilvl
  # 2: class
  # 3: role

  # printf "%.0f" is used to round the number
  # IO Score -- Character, ilvl class
  local -r output="$(printf "%s -- %s, %s %s\n" "$(printf "%.0f" "${parsedJson[0]}")" "$2" "${parsedJson[1]}" "${parsedJson[2]}")"

  case "${parsedJson[3]}" in
    DPS)
      printf "%s\n" "${output}" >> "${DPS_FILE}"
      return
      ;;
    HEALING)
      printf "%s\n" "${output}" >> "${HEALER_FILE}"
      return
      ;;
    TANK)
      printf "%s\n" "${output}" >> "${TANK_FILE}"
      return
      ;;
  esac
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

[[ "$(whoami)" = "root" ]] &&
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"

[[ ! -f "${INPUT_FILE}" ]] &&
  exit_script_on_failure "Please specify a file with a list of character names."

rm -f "${OUTPUT_FILE}"
touch "${DPS_FILE}" "${HEALER_FILE}" "${TANK_FILE}"

# Add header
printf "======================================================\n|      Collector's Anonymous Mythic Plus Ratings     |\n|              Generated on %s             |\n| https://github.com/krathalan/miscellaneous-scripts |\n======================================================\n\nIO Score -- Character, ilvl class\n=================================\n" "$(date "+%b %d, %Y")" > "${OUTPUT_FILE}"

# Get IO scores
mapfile -t characters < "${INPUT_FILE}"

for char in "${characters[@]}"; do
  resolve_character_info "${char##* }" "${char%% *}" &
done

wait

# Sort output from highest IO score to lowest
sort -r -n -o "${DPS_FILE}" "${DPS_FILE}" &
sort -r -n -o "${HEALER_FILE}" "${HEALER_FILE}" &
sort -r -n -o "${TANK_FILE}" "${TANK_FILE}" &

wait

{
  printf "\nTanks:\n"
  cat "${TANK_FILE}"
  printf "\nHealers:\n"
  cat "${HEALER_FILE}"
  printf "\nDPS:\n"
  cat "${DPS_FILE}"
} >> "${OUTPUT_FILE}"
