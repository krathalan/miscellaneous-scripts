#!/bin/bash
#
# Description: Sets up Arch Linux with the software I use, and 
#              configures various aspects of each system to my liking.
#
# Homepage: https://gitlab.com/krathalan
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# sed usage from https://bbs.archlinux.org/viewtopic.php?id=173653

# ------------------
# --- Guidelines ---
# ------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# -----------------------------
# ----- Program variables -----
# -----------------------------

# Colors
readonly GREEN=$(tput bold && tput setaf 2)
readonly RED=$(tput bold && tput setaf 1)
readonly ORANGE=$(tput sgr0 && tput setaf 3)
readonly TURQOISE=$(tput bold && tput setaf 6)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

readonly DNF_CONFIG_FILE="/etc/dnf/dnf.conf"
readonly SCRIPT_NAME=$(basename "$0")

stepCounter=1
stepWithColor="${TURQOISE}${stepCounter}${NC}"

installGamingSoftware=false

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() {
  printf "\n[%s✖%s] Error: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

#######################################
# Prints "Done."
# Globals:
#   TURQOISE, stepCounter, NC
# Arguments:
#   none
# Returns:
#   none
#######################################
print_done() {
  stepCounter=$(( stepCounter + 1 ))
  stepWithColor="${TURQOISE}${stepCounter}${NC}"
  printf "Done.\n\n"
}

# --------------------------------------
# --------------- Script ---------------
# --------------------------------------

# Parse flags. From:
# https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0; do
  case "$1" in
    -g)
      installGamingSoftware=true;
      break
      ;;
    *)
      break
      ;;
  esac
done

# Print intro
printf "Starting %s BASH script; Copyright (C) 2019 krathalan\n" "${SCRIPT_NAME}"
printf "This is free software: you are free to change and redistribute it.\n"
printf "There is NO WARRANTY, to the extent permitted by law.\n\n"

if [[ $(whoami) == "root" ]]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

printf "%s. Installing packages with pacman...\n" "${stepWithColor}"
# Kernel packages
sudo pacman -S --needed linux-headers linux-lts linux-lts-headers

# System packages
sudo pacman -S --needed apparmor bash-completion blueberry cups cups-pdf ffmpeg file-roller flatpak gnome-keyring gnome-online-accounts gnome-online-miners gst-libav gtk2 gvfs-goa gvfs-gphoto2 gvfs-mtp hplip intel-ucode iw iwd libxcursor libxinerama libxrandr libxss libxtst network-manager-applet pulseaudio-bluetooth python-pip system-config-printer unzip wget wireguard-dkms wireguard-tools xdg-user-dirs xdg-user-dirs-gtk xorg-xinit xorg-xinput xorg-xrandr zip

# User packages
sudo pacman -S --needed android-tools bookworm borg cowsay easytag eog epiphany evince evolution firefox-developer-edition fortune-mod fractal gimp git gnome-calculator gnome-characters gnome-clocks gnome-disk-utility gnome-screenshot gnome-system-monitor imagemagick jq keepassxc libmediainfo libreoffice-fresh mosh mpv neofetch papirus-icon-theme perl-image-exiftool polari qbittorrent qt5-styleplugins redshift reflector rhythmbox seahorse streamlink stress syncthing tilix youtube-dl zim

# Dependency for building yay
sudo pacman -S --needed --asexplicit go
print_done 

printf "%s. Installing fonts with pacman...\n" "${stepWithColor}"
sudo pacman -S --needed noto-fonts noto-fonts-emoji ttf-dejavu ttf-linux-libertine ttf-roboto 
print_done

printf "%s. Installing packages from AUR...\n" "${stepWithColor}"
yay -S plata-theme shellcheck-static ttf-roboto-mono vscodium-bin
print_done

update_Qt_Gtk_theme="false"
if ! grep -qi "QT_QPA_PLATFORMTHEME" /etc/environment; then
  printf "%s. Making Qt apps use your GTK theme...\n" "${stepWithColor}"
  echo "QT_QPA_PLATFORMTHEME=gtk2" | sudo tee -a /etc/environment > /dev/null
  update_Qt_Gtk_theme="true"
  print_done
fi

printf "%s. Installing Flatpaks from Flathub...\n" "${stepWithColor}"
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak install -y flathub com.discordapp.Discord
flatpak install -y flathub io.freetubeapp.FreeTube
flatpak install -y flathub org.freac.freac
flatpak install -y flathub org.signal.Signal
flatpak update -y # Needed to force flatpak to install drivers and themes
print_done

if [[ "${installGamingSoftware}" == "true" ]]; then
  printf "%s Installing gaming software...\n" "${stepWithColor}"

  if ! grep -q "#\[multilib\]" /etc/pacman.conf; then
    sudo pacman -S wine lutris

    # NVIDIA drivers
    sudo pacman -S nvidia nvidia-lts lib32-nvidia-utils

    # Battle.net dependencies
    sudo pacman -S lib32-gnutls lib32-libldap lib32-libgpg-error lib32-sqlite lib32-libpulse 
    print_done
  else
    exit_script_on_failure "You must enable the multilib repositories in /etc/pacman.conf to install gaming software."
  fi
fi

if [[ "${update_Qt_Gtk_theme}" == "true" ]]; then
  printf "[%s!%s] You will need to reboot your computer for Qt applications to start using your Gtk theme.\n" "${ORANGE}" "${NC}"
fi

printf "[%s✔%s] Bash script %s complete.\n" "${GREEN}" "${NC}" "${SCRIPT_NAME}"