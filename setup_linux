#!/bin/sh
#
# Description: Sets up Arch Linux with the software I use, and 
#              configures various aspects of each system to my liking.
#
# Homepage: https://gitlab.com/krathalan/miscellaneous-scripts
#
# Copyright (C) 2019 krathalan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -----------------------------------------
# -------------- Guidelines ---------------
# -----------------------------------------

# This script follows the Google Shell Style Guide: 
# https://google.github.io/styleguide/shell.xml

# This script uses shellcheck: https://www.shellcheck.net/

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeu # (o pipefail) is bash only!

# -----------------------------------------
# ----------- Program variables -----------
# -----------------------------------------

# Colors
readonly GREEN=$(tput bold && tput setaf 2)
readonly RED=$(tput bold && tput setaf 1)
readonly ORANGE=$(tput bold && tput setaf 3)
readonly PURPLE=$(tput bold && tput setaf 5)
readonly NC=$(tput sgr0) # No color/turn off all tput attributes

# Step variables
stepCounter=1
stepWithColor="${PURPLE}${stepCounter}${NC}"

# Other
readonly SCRIPT_NAME=$(basename "$0")

# -----------------------------------------
# --------------- Functions ---------------
# -----------------------------------------

#######################################
# Prints passed error message before premature exit.
# Prints everything to >&2 (STDERR).
# Globals:
#   RED, NC
#   SCRIPT_NAME
# Arguments:
#   $1: error message to print
# Returns:
#   none
#######################################
exit_script_on_failure() 
{
  printf "\n[%s✖%s] Error: %s\n" "${RED}" "${NC}" "$1" >&2
  printf "Exiting %s Bash script.\n" "${SCRIPT_NAME}" >&2

  exit 1
}

#######################################
# Prints "Done."
# Globals:
#   PURPLE, stepCounter, NC
# Arguments:
#   none
# Returns:
#   none
#######################################
print_done() 
{
  stepCounter=$(( stepCounter + 1 ))
  stepWithColor="${PURPLE}${stepCounter}${NC}"
  printf "Done.\n\n"
}

# -----------------------------------------
# ---------------- Script -----------------
# -----------------------------------------

# Print intro
printf "Starting %s Bash script; Copyright (C) 2019-%s krathalan\n" "${SCRIPT_NAME}" "$(date +%Y)"
printf "This is free software: you are free to change and redistribute it.\n"
printf "There is NO WARRANTY, to the extent permitted by law.\n\n"

if [ "$(whoami)" = "root" ]; then
  exit_script_on_failure "This script should NOT be run as root (or sudo)!"
fi

flatpakNeedsRestart="false"
if [ ! -x "$(command -v "flatpak")" ]; then
  flatpakNeedsRestart="true"
fi

printf "%s. Installing fonts with pacman...\n" "${stepWithColor}"
sudo pacman -S --needed noto-fonts noto-fonts-cjk noto-fonts-emoji ttf-dejavu ttf-linux-libertine ttf-roboto 
print_done

printf "%s. Installing packages with pacman...\n" "${stepWithColor}"
# System packages
sudo pacman -S --needed alacritty alsa-plugins apparmor bash-completion blueman cups cups-pdf dmenu dunst ffmpeg flatpak gnome-keyring gst-libav gvfs-mtp hplip i3status iw iwd notification-daemon pamixer pavucontrol pigz playerctl pulseaudio-alsa source-highlight system-config-printer unzip wget xdg-user-dirs xdg-user-dirs-gtk zip

# User packages
sudo pacman -S --needed android-tools bookworm borg cowsay easytag eog evince fortune-mod fractal gimp git gnome-calculator gnome-characters imagemagick jq keepassxc mediainfo libreoffice-fresh lollypop mosh mpv neofetch papirus-icon-theme perl-image-exiftool polari qbittorrent qt5-styleplugins redshift reflector streamlink stress syncthing youtube-dl zim

# Dependency for building yay and gotop
sudo pacman -S --needed --asexplicit go
print_done 

if [ -x "$(command -v "yay")" ]; then
  printf "%s. Installing packages from AUR...\n" "${stepWithColor}"
  yay -S consolas-font gotop libldac nano-syntax-highlighting-git plata-theme ripcord shellcheck-static ttf-roboto-mono vscodium-bin wtwitch yay
  yay -S pulseaudio-modules-bt-git
  print_done
fi

qtThemesNeedRestart="false"
if ! grep -qi "QT_QPA_PLATFORMTHEME" /etc/environment; then
  printf "%s. Making Qt apps use your GTK theme...\n" "${stepWithColor}"
  echo "QT_QPA_PLATFORMTHEME=gtk2" | sudo tee -a /etc/environment > /dev/null
  qtThemesNeedRestart="true"
  print_done
fi

printf "%s. Installing Flatpaks from Flathub...\n" "${stepWithColor}"
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak install -y flathub com.discordapp.Discord
flatpak install -y flathub io.freetubeapp.FreeTube
flatpak install -y flathub org.freac.freac
flatpak install -y flathub org.signal.Signal
flatpak update -y # Needed to force flatpak to install drivers and themes
print_done

# From https://bbs.archlinux.org/viewtopic.php?id=173653
printf "%s. Adding .gif thumbnailer for file browsers...\n" "${stepWithColor}"
sudo pacman -S --needed ffmpegthumbnailer

if ! grep -q -i "MimeType=image/gif" /usr/share/thumbnailers/ffmpegthumbnailer.thumbnailer; then
  sudo sed -i "s#MimeType=#MimeType=image/gif;#" /usr/share/thumbnailers/ffmpegthumbnailer.thumbnailer
fi

rm -rf "${HOME}/.cache/thumbnails"
print_done

printf "%s Performing machine-specific configuration...\n" "${stepWithColor}"

# Machine specific configuration
if grep -q desktop /etc/hostname; then
  # Hi-DPI scaling
  echo "GDK_SCALE=2" | sudo tee -a /etc/environment > /dev/null

  # Kernel packages
  sudo pacman -S --needed linux-lts

  # Wireguard, prebuilt versions
  sudo pacman -S --needed wireguard-arch wireguard-lts wireguard-tools

  # Fix tiling background
  sudo pacman -S --needed feh

  # Arch-specific packages
  sudo pacman -S --needed firefox firefox-developer-edition intel-ucode thunderbird
  xdg-settings set default-web-browser firefox.desktop

  # X11 packages
  sudo pacman -S --needed i3-gaps i3lock scrot
  
  printf "%s Installing gaming software...\n" "${stepWithColor}"

  if ! grep -q "#\[multilib\]" /etc/pacman.conf; then
    # NVIDIA drivers
    sudo pacman -S --needed nvidia nvidia-lts lib32-nvidia-utils

    # WINE stuff
    sudo pacman -S --needed wine-staging wine_gecko wine-mono lutris

    # Battle.net dependencies
    sudo pacman -S --needed lib32-gnutls lib32-libldap lib32-libgpg-error lib32-sqlite lib32-libpulse 

    # More 32 bit libraries
    sudo pacman -S --needed lib32-alsa-plugins lib32-vulkan-icd-loader
    print_done
  else
    exit_script_on_failure "You must enable the multilib repositories in /etc/pacman.conf to install gaming software."
  fi
elif grep -q laptop /etc/hostname; then
  # Kernel packages
  sudo pacman -S --needed linux-libre-headers linux-libre-lts linux-libre-lts-headers

  # Wireguard, DKMS version
  sudo pacman -S --needed wireguard-dkms wireguard-tools

  # Parabola-specific packages
  sudo pacman -S --needed icecat icedove iceweasel

  # Wayland packages 
  sudo pacman -S grim qt5-wayland sway swayidle swaylock wl-clipboard xorg-server-xwayland
fi

print_done

# Print summary info for user
if [ "${qtThemesNeedRestart}" = "true" ]; then
  printf "[%s!%s] You will need to reboot your computer for Qt applications to start using your Gtk theme.\n" "${ORANGE}" "${NC}"
fi

if [ "${flatpakNeedsRestart}" = "true" ]; then
  printf "[%s!%s] You will need to reboot your computer for Flatpak applications to show up in your application menu.\n" "${ORANGE}" "${NC}"
fi

printf "[%s✔%s] Bash script %s complete.\n" "${GREEN}" "${NC}" "${SCRIPT_NAME}"
